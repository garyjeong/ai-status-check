# AI Service Status Dashboard

<context>
# Overview  
AI 서비스 상태 체크 대시보드는 개발자들이 가장 많이 사용하는 AI 서비스들(ChatGPT, Claude, Cursor)의 실시간 상태를 한눈에 확인할 수 있는 웹 애플리케이션입니다. 

이 프로젝트의 목적은:
- AI 서비스 장애 시 빠른 원인 파악
- 실시간 상태 모니터링
- 개발 생산성 향상을 위한 서비스 상태 인지

주요 타겟 사용자는 AI 도구를 사용하는 개발자들이며, 특히 여러 AI 서비스를 동시에 사용하는 개발팀에게 유용합니다.

# Core Features  
1. **실시간 상태 모니터링**
   - ChatGPT (OpenAI) 서비스 상태 확인
   - Claude (Anthropic) 서비스 상태 확인  
   - Cursor 서비스 상태 확인
   - 각 서비스별 세부 컴포넌트 상태 표시

2. **자동 갱신 시스템**
   - 사용자 설정 가능한 갱신 간격 (5초, 10초, 30초, 1분, 5분)
   - WebSocket을 통한 실시간 업데이트
   - 새로고침 없는 상태 반영

3. **시각적 대시보드**
   - 3개 서비스별 수평 분할 화면
   - 전체 화면 반응형 디자인
   - 직관적인 상태 표시 (정상/경고/장애)

4. **상세 정보 표시**
   - 각 서비스별 개별 컴포넌트 상태
   - 최근 인시던트 정보
   - 업타임 통계

# User Experience  
## 사용자 페르소나
- **개발자**: AI 도구 의존도가 높은 소프트웨어 개발자
- **개발팀 리더**: 팀의 생산성 모니터링이 필요한 리더
- **DevOps 엔지니어**: 인프라 상태 모니터링 담당자

## 주요 사용자 흐름
1. 대시보드 접속
2. 각 AI 서비스 상태 확인
3. 갱신 간격 설정
4. 세부 상태 정보 확인
5. 지속적인 모니터링

## UI/UX 고려사항
- 한눈에 알아볼 수 있는 색상 코딩 (초록/노랑/빨강)
- 깔끔하고 현대적인 인터페이스
- 모바일 친화적 반응형 디자인
</context>

<PRD>
# Technical Architecture  

## System Components
1. **Backend (FastAPI)**
   - API 엔드포인트: 각 서비스 상태 조회
   - 스케줄러: 주기적 상태 체크
   - WebSocket 서버: 실시간 업데이트 제공
   - 캐싱 시스템: 응답 성능 최적화

2. **Frontend (Jinja Templates + JavaScript)**
   - 서버 사이드 렌더링 (Jinja2)
   - WebSocket 클라이언트
   - 반응형 CSS Grid/Flexbox 레이아웃
   - 실시간 업데이트 UI

3. **Data Collection Module**
   - OpenAI Status API 연동
   - Anthropic Status API 연동  
   - Cursor Status 페이지 스크래핑
   - 에러 처리 및 재시도 로직

## Data Models
```python
# Status Models
class ServiceStatus:
    service_name: str
    overall_status: str  # operational, degraded, outage
    components: List[ComponentStatus]
    last_updated: datetime
    uptime_percentage: float

class ComponentStatus:
    name: str
    status: str
    description: str

class IncidentInfo:
    title: str
    status: str
    created_at: datetime
    resolved_at: Optional[datetime]
```

## APIs and Integrations
1. **OpenAI Status**: https://status.openai.com/api/v2/status.json
2. **Anthropic Status**: https://status.anthropic.com/api/v2/status.json  
3. **Cursor Status**: 웹 스크래핑 (status.cursor.com)

## Infrastructure Requirements
- Python 3.8+ with FastAPI, Jinja2, WebSockets
- 백그라운드 작업을 위한 Celery 또는 APScheduler
- Redis (캐싱 및 WebSocket 세션 관리)
- nginx (프록시 및 정적 파일 서빙)

# Development Roadmap  

## Phase 1: MVP Core Infrastructure
1. FastAPI 기본 서버 구조 설정
2. 기본 Jinja2 템플릿 시스템 구축
3. 단일 서비스(OpenAI) 상태 조회 API 구현
4. 기본 웹 인터페이스 (정적 버전)

## Phase 2: Multi-Service Integration  
1. Anthropic, Cursor 상태 API/스크래핑 추가
2. 통합 상태 데이터 모델 구현
3. 3분할 레이아웃 UI 구현
4. 기본 스타일링 및 반응형 디자인

## Phase 3: Real-time Features
1. WebSocket 서버 구현
2. 자동 갱신 시스템 구축
3. 사용자 설정 가능한 갱신 간격
4. 실시간 UI 업데이트 로직

## Phase 4: Enhanced UX
1. 세부 컴포넌트 상태 표시
2. 인시던트 히스토리 기능
3. 업타임 통계 표시
4. 모바일 최적화

## Phase 5: Production Ready
1. 에러 처리 및 로깅 시스템
2. 성능 최적화 (캐싱, 압축)
3. 보안 강화
4. 배포 자동화

# Logical Dependency Chain

## Foundation First (Phase 1)
- FastAPI 서버가 모든 기능의 기반
- Jinja2 템플릿 시스템이 UI 렌더링 기반
- 단일 서비스 연동으로 패턴 확립

## Incremental Service Addition (Phase 2)  
- OpenAI 연동 성공 후 다른 서비스 추가
- 데이터 모델 표준화로 확장성 확보
- UI 레이아웃 먼저 구현 후 데이터 연결

## Real-time Layer (Phase 3)
- 기본 데이터 수집이 안정된 후 실시간 기능 추가
- WebSocket은 기존 REST API 위에 구축
- 사용자 설정은 기본 기능 완성 후 추가

## Polish and Performance (Phase 4-5)
- 핵심 기능 완성 후 UX 개선
- 안정성과 성능은 마지막 단계에서 집중

# Risks and Mitigations  

## Technical Challenges
**리스크**: 외부 API 응답 지연 및 장애
**완화방안**: 타임아웃 설정, 캐싱, 에러 처리

**리스크**: Cursor 상태 페이지 스크래핑 불안정
**완화방안**: 견고한 파싱 로직, 대체 데이터 소스 고려

**리스크**: WebSocket 연결 불안정
**완화방안**: 자동 재연결, 폴백 폴링 방식

## MVP Definition
- 3개 서비스 기본 상태 확인 가능
- 수동 새로고침으로 상태 업데이트
- 반응형 3분할 레이아웃
- 기본적인 상태 표시

## Resource Constraints  
**리스크**: 개발 시간 부족
**완화방안**: 단계별 개발, 핵심 기능 우선순위

**리스크**: 외부 API 제한
**완화방안**: 적절한 요청 간격, 캐싱 활용

# Appendix  

## Research Findings
1. **OpenAI Status API**: JSON API 제공, 컴포넌트별 상태 정보 포함
2. **Anthropic Status**: Statuspage.io 기반, JSON API 사용 가능
3. **Cursor Status**: 비교적 새로운 서비스, 스크래핑 필요할 수 있음

## Technical Specifications
- **Frontend**: HTML5, CSS3, JavaScript (ES6+), WebSocket API
- **Backend**: Python 3.8+, FastAPI, Jinja2, aiohttp
- **Database**: Redis (캐싱), SQLite (설정 저장)
- **Deployment**: Docker, nginx, gunicorn

## Color Coding System
- 🟢 Operational: #22c55e (Green)
- 🟡 Degraded: #f59e0b (Amber)  
- 🔴 Outage: #ef4444 (Red)
- ⚪ Unknown: #6b7280 (Gray)
</PRD> 